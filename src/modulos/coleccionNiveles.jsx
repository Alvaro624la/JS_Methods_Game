export const coleccionNiveles = [
    {
        nivel: 1, 
        titulo: 'Calentamiento n¬∫1: Array üê±', 
        descripcion: 'Vamos a empezar calentando con los conceptos m√°s b√°sicos. Empecemos por a√±adir valores a √©ste array:', 
        problema: "let mascotas = ['perro'];", 
        planteamiento: 'A√±ade, al principio del array, el nuevo "gato" que voy a adoptar para hacer compa√±ia a mi perro.', 
        respuesta: [
            "mascotas.unshift('gato')",
            "mascotas.unshift('gato') ",
            "mascotas.unshift('gato')  ",
            "mascotas.unshift('gato');",
            "mascotas.unshift( 'gato');",
            "mascotas.unshift('gato' );",
            "mascotas.unshift('gato') ;",
            "mascotas.unshift(' gato');",
            "mascotas.unshift('gato ');",
            "mascotas.unshift('gato'); ",
            "mascotas.unshift(' gato'); ",
            "mascotas.unshift('gato');;",
            "mascotas.unshift( 'gato');;",
            "mascotas.unshift('gato'); ;",
            "mascotas.unshift('gato');; ",
            "mascotas.unshift(' gato');;",
            "mascotas.unshift('gato ');;",
            "mascotas.unshift( 'gato');; ",
            "mascotas.unshift(' gato');; ",
            "mascotas.unshift('gato ' );",
            "mascotas.unshift('gato');;",
        ],
        solucion: "let mascotas = ['gato', 'perro'];", 
        comprobacion: "mascotas[0].includes('gato')"
    },
    {
        nivel: 2, 
        titulo: 'Calentamiento n¬∫2: Array üê≠', 
        descripcion: 'Continuamos calentando. Ahora me ha entrado un rat√≥n en casa... ¬°est√° entre mis mascotas!', 
        problema: "let mascotas = ['gato', 'raton', 'perro'];", 
        planteamiento: 'Modifica el array eliminando el "raton" de entre mis queridas mascotas.', 
        respuesta: [
            "mascotas.splice(1, 1)",
            "mascotas.splice(1, 1) ",
            "mascotas.splice(1, 1)  ",
            "mascotas.splice(1, 1);",
            "mascotas.splice(1,1);",
            "mascotas.splice( 1, 1 );",
            "mascotas.splice( 1 ,1);",
            "mascotas.splice( 1,1)",
        ],
        solucion: "let mascotas = ['gato', 'perro'];"
    },
    {
        nivel: 3, 
        titulo: 'Calentamiento n¬∫3: Array üê∂', 
        descripcion: 'He decidido presentarme voluntaria y pasear a todos √©stos perros. Ayudame a contarlos r√°pidamente para poder apuntarlo en el registro de la perrera.', 
        problema: "let perros = ['Luby', 'Luna', 'Toby', 'Leo', 'Coco', 'Harry', 'Nelson', 'July', 'Gabe', 'Darleen']; <br>let cantidad = <em>null</em>;", 
        planteamiento: '¬øCu√°l √©s el n√∫mero exacto de perros que tengo que pasear hoy? Asigna el valor resultante a la variable <code>cantidad</code>.', 
        respuesta: [
            "cantidad=perros.length ",
            "cantidad=perros.length",
            "cantidad=perros.length  ",
            "cantidad=perros.length;",
            "cantidad = perros.length;",
            "cantidad= perros.length;",
            "cantidad =perros.length;",
            "cantidad= perros.length",
            "cantidad = perros.length",
            "cantidad= perros.length",
            "cantidad =perros.length",
            "cantidad =perros.length",
            "cantidad= perros.length;",
            "cantidad = perros.length ;",
            "cantidad= perros.length;",
            "cantidad =perros.length;",
            "cantidad =perros.length;",
            "cantidad= perros.length;",
            "cantidad =perros.length;",
            "cantidad= perros.length;",
            "cantidad = perros.length ",
            "cantidad=perros.length;",
            "cantidad = perros.length;",
            "cantidad= perros.length;",
            "cantidad =perros.length;",
            "cantidad =perros.length;",
            "cantidad= perros.length;",
            "cantidad =perros.length;",
            "cantidad= perros.length;",
            "cantidad = perros.length;"
        ],
        solucion: "let cantidad = 10;"
    },
    {
        nivel: 4, 
        titulo: 'Nivel 1: B√°sico ‚òï',
        descripcion: 'Creo que me faltaba aceite en casa...', 
        problema: "let cintaCaj = ['patatas buenas', 'huevos'];",
        planteamiento: '¬øC√≥mo a√±ado "aceite" al final de la cinta del cajero antes de que acabe de esc√°near toda la compra?',
        respuesta: [
            "cintaCaj.push('aceite')",
            "cintaCaj.push( 'aceite')",
            "cintaCaj.push('aceite' )",
            "cintaCaj.push('aceite') ",
            "cintaCaj.push( 'aceite' )",
            "cintaCaj.push( 'aceite') ",
            "cintaCaj.push( 'aceite' ) ",
            "cintaCaj.push( 'aceite' )",
            "cintaCaj.push( ' aceite' )",
            "cintaCaj.push('aceite' )",
            "cintaCaj.push(' aceite')",
            "cintaCaj.push('aceite ')",
            "cintaCaj.push('aceite' )",
            "cintaCaj.push('aceite' ) ",
            "cintaCaj.push( 'aceite' ) ",
            "cintaCaj.push(' aceite') ",
            "cintaCaj.push('aceite' ) ",
            "cintaCaj.push('aceite' )  ",
            "cintaCaj.push('aceite');",
            "cintaCaj.push( 'aceite');",
            "cintaCaj.push('aceite' );",
            "cintaCaj.push('aceite') ;",
            "cintaCaj.push( 'aceite' );",
            "cintaCaj.push( 'aceite') ;",
            "cintaCaj.push( 'aceite' ) ;",
            "cintaCaj.push( 'aceite' )",
            "cintaCaj.push( ' aceite' );",
            "cintaCaj.push('aceite' );",
            "cintaCaj.push(' aceite');",
            "cintaCaj.push('aceite ');",
            "cintaCaj.push('aceite' );",
            "cintaCaj.push('aceite' ); ",
            "cintaCaj.push( 'aceite' ); ",
            "cintaCaj.push(' aceite'); ",
            "cintaCaj.push('aceite' ); ",
            "cintaCaj.push('aceite' ) ; ",
            "cintaCaj.push('aceite');;",
            "cintaCaj.push( 'aceite');;",
            "cintaCaj.push('aceite'); ;",
            "cintaCaj.push( 'aceite'); ;",
            "cintaCaj.push('aceite');; ",
            "cintaCaj.push('aceite'); ; ",
            "cintaCaj.push('aceite');;  ",
            "cintaCaj.push( 'aceite');;  ",
            "cintaCaj.push('aceite');;",
            "cintaCaj.push( 'aceite');;",
            "cintaCaj.push('aceite') ;;",
            "cintaCaj.push( 'aceite') ;;",
            "cintaCaj.push('aceite');; ",
            "cintaCaj.push('aceite') ;; ",
            "cintaCaj.push('aceite');;  ",
            "cintaCaj.push( 'aceite');;  ",
            "cintaCaj.push(' aceite');;",
            "cintaCaj.push( ' aceite');; ",
            "cintaCaj.push(' aceite');;  ",
            "cintaCaj.push( ' aceite'); ;;",
            "cintaCaj.push('aceite ');;",
            "cintaCaj.push('aceite ');; ",
            "cintaCaj.push('aceite ');;  ",
            "cintaCaj.push( 'aceite');; ",
            "cintaCaj.push( 'aceite') ;;",
            "cintaCaj.push( 'aceite');;  ",
            "cintaCaj.push(' aceite'); ; ",
            "cintaCaj.push(' aceite');; ",
            "cintaCaj.push('aceite ' );",
            "cintaCaj.push('aceite'); ",
            "cintaCaj.push(' aceite');  ",
            "cintaCaj.push( 'aceite' );  ",
            "cintaCaj.push('aceite' ) ;  ",
            "cintaCaj.push('aceite');;   "
        ],
        solucion: "cintaCaj = ['patatas buenas', 'huevos', 'aceite'];"
    },
    {
        nivel: 5, 
        titulo: 'Nivel 2: B√°sico ü•ö',
        descripcion: 'Ya tengo todo preparado para empezar la tortilla, pero me he dado cuenta de que hay patatas en mal estado', 
        problema: "let productos = ['patatas pochas', 'patatas buenas', 'huevos', 'aceite'];",
        planteamiento: '¬øC√≥mo elimino las patatas pochas principio del array?',
        respuesta: [
            "productos.shift();",
            "productos.shift()",
            "productos.shift(); ",
            "productos.shift() ",
            "productos.shift();;",
            "productos.shift();; ",
            "productos.shift();;  ",
            "productos.shift(); ;",
            "productos.shift() ;"
        ],
        solucion: "productos = ['patatas buenas', 'huevos', 'aceite'];"
    },
    {
        //duda/problema: no entender bien el enunciado ni el uso de solo 1 parametro para el m√©todo slice
        nivel: 6, 
        titulo: 'Nivel 3: B√°sico üçÖüßÄ',
        descripcion: 'Voy a acompa√±ar la tortilla con macarrones. En el armario tengo tres ingredientes, pero solo quiero tomate y queso.', 
        problema: "let ingredientes = ['pasas', 'tomate', 'queso'];",
        planteamiento: '¬øC√≥mo parto o descarto √©ste primer ingrediente dejando los otros dos restantes?',
        respuesta: [
            "ingredientes.slice(1)",
            "ingredientes.slice( 1)",
            "ingredientes.slice(1 )",
            "ingredientes.slice( 1 )",
            "ingredientes.slice(1 ) ",
            "ingredientes.slice( 1 ) ",

            "ingredientes.slice(1);",
            "ingredientes.slice( 1);",
            "ingredientes.slice(1 );",
            "ingredientes.slice( 1 );",
            "ingredientes.slice(1 ); ",
            "ingredientes.slice( 1 ); ",

            "ingredientes.slice(1) ;",
            "ingredientes.slice( 1) ;",
            "ingredientes.slice(1 ) ;",
            "ingredientes.slice( 1 ) ;",
            "ingredientes.slice(1 ) ; ",
            "ingredientes.slice( 1 ) ; ",
        ],
        solucion: "ingredientes = ['tomate', 'queso'];"
    },
    {
        nivel: 7, 
        titulo: 'Nivel 4: B√°sico üíÅ',
        descripcion: 'Hoy he ido a mi local de confianza y he visto que hay varias personas esperando.', 
        problema: "let cola = ['Ana', 'Juan', 'Carlos', 'Marimar', 'Silvia'];",
        planteamiento: '¬øCu√°l es el √∫ltimo √≠ndice en la posici√≥n de la cola del establecimiento? (La √∫ltima s√© que se llama Silvia)',
        respuesta: [
            "cola.lastIndexOf('Silvia');",
            "cola.lastIndexOf(' Silvia ');",
            'cola.lastIndexOf("Silvia");',
            'cola.lastIndexOf(" Silvia ");',
            "cola.lastIndexOf( 'Silvia' );",
            "cola.lastIndexOf( ' Silvia ' );",
            'cola.lastIndexOf( "Silvia" );',
            'cola.lastIndexOf( " Silvia " );',

            "cola.lastIndexOf('Silvia')",
            "cola.lastIndexOf(' Silvia ')",
            'cola.lastIndexOf("Silvia")',
            'cola.lastIndexOf(" Silvia ")',
            "cola.lastIndexOf( 'Silvia' )",
            "cola.lastIndexOf( ' Silvia ' )",
            'cola.lastIndexOf( "Silvia" )',
            'cola.lastIndexOf( " Silvia " )',

            "cola.lastIndexOf('Silvia') ;",
            "cola.lastIndexOf(' Silvia ') ;",
            'cola.lastIndexOf("Silvia") ;',
            'cola.lastIndexOf(" Silvia ") ;',
            "cola.lastIndexOf( 'Silvia' ) ;",
            "cola.lastIndexOf( ' Silvia ' ) ;",
            'cola.lastIndexOf( "Silvia" ) ;',
            'cola.lastIndexOf( " Silvia " ) ;',
        ],
        solucion: "cola = 4; (interpretando que la posicion 0 es la primera)"
    },
    {
        nivel: 8, 
        titulo: 'Nivel 5: B√°sico üëÄ',
        descripcion: 'Me parece haber visto a una amiga m√≠a delante. Creo que es Ana.', 
        problema: "let posicion = ['Ana', 'Juan', 'Carlos', 'Marimar', 'Silvia', 'yo'];",
        planteamiento: '¬øCu√°l es el √≠ndice de Ana en el array?',
        respuesta: [
            "posicion.indexOf('Ana');",
            "posicion.indexOf(' Ana ');",
            'posicion.indexOf("Ana");',
            'posicion.indexOf(" Ana ");',
            "posicion.indexOf( 'Ana' );",
            "posicion.indexOf( ' Ana ' );",
            'posicion.indexOf( "Ana" );',
            'posicion.indexOf( " Ana " );',

            "posicion.indexOf('Ana')",
            "posicion.indexOf(' Ana ')",
            'posicion.indexOf("Ana")',
            'posicion.indexOf(" Ana ")',
            "posicion.indexOf( 'Ana' )",
            "posicion.indexOf( ' Ana ' )",
            'posicion.indexOf( "Ana" )',
            'posicion.indexOf( " Ana " )',

            "posicion.indexOf('Ana') ;",
            "posicion.indexOf(' Ana ') ;",
            'posicion.indexOf("Ana") ;',
            'posicion.indexOf(" Ana ") ;',
            "posicion.indexOf( 'Ana' ) ;",
            "posicion.indexOf( ' Ana ' ) ;",
            'posicion.indexOf( "Ana" ) ;',
            'posicion.indexOf( " Ana " ) ;'
        ],
        solucion: "posicion = 0; (interpretando que la posici√≥n 0 es la primera)"
    },
    {
        nivel: 9, 
        titulo: 'Nivel 6: B√°sico üîÄ',
        descripcion: 'La cola la estaban haciendo al reves y ahora las posiciones de las personas se revertir√°n.', 
        problema: "let colaReves = ['Ana', 'Juan', 'Carlos', 'Marimar', 'Silvia', 'yo'];",
        planteamiento: '¬øComo lo har√≠amos?',
        respuesta: [
            "colaReves.reverse()",
            "colaReves.reverse() ",
            "colaReves.reverse()  ",
            "colaReves.reverse();",
            "colaReves.reverse() ;",
            "colaReves.reverse()  ; ",
            "colaReves.reverse();;",
            "colaReves.reverse() ; ;",
            "colaReves.reverse()  ;;",
            "colaReves.reverse() ;  ;",
            "colaReves.reverse()  ; ;",
        ],
        solucion: "colaReves = ['yo', 'Silvia', 'Marimar', 'Carlos', 'Juan', 'Ana'];"
    },
    {
        nivel: 10, 
        titulo: 'Nivel 7: B√°sico üé®',
        descripcion: 'Llego a casa y continuo con el CSS. He escogido los colores para el backoground de mi p√°gina web pero el verde pistacho no me convence.', 
        problema: "let paleta = ['rojo', 'negro', 'verde pistacho'];",
        planteamiento: '¬øC√≥mo puedo quitar √©ste √∫ltimo color del array?',
        respuesta: [
            "paleta.pop()",
            "paleta.pop() ",
            "paleta.pop()  ",
            "paleta.pop();",
            "paleta.pop() ;",
            "paleta.pop()  ;",
            "paleta.pop()  ; ",
            "paleta.pop();;",
            "paleta.pop() ; ;",
            "paleta.pop()  ;;",
            "paleta.pop() ;  ;",
            "paleta.pop()  ; ;",
        ],
        solucion: "paleta = ['rojo', 'negro'];"
    },
    {
        nivel: 11, 
        titulo: 'Nivel 1: Junior Front-End ü§û', 
        descripcion: 'Invertir cadena', 
        problema: "let cadena = 'pato donald'; <br>let invertida = <em>undefined</em>;", 
        planteamiento: 'Invierte los caracteres de la variable cadena, y asigalos a la variable <code>invertida</code>.', 
        respuesta: [
            "invertida = cadena.split('').reverse().join('');",
            'invertida = cadena.split("").reverse().join("");',
            "invertida=cadena.split('').reverse().join('');",
            'invertida=cadena.split("").reverse().join("");',
            "invertida = cadena.split('').reverse().join('')",
            'invertida = cadena.split("").reverse().join("")',
            "invertida=cadena.split('').reverse().join('')",
            'invertida=cadena.split("").reverse().join("")',
            "invertida = cadena.split('').reverse().join('') ",
            'invertida = cadena.split("").reverse().join("") ',
            "invertida=cadena.split('').reverse().join('') ",
            'invertida=cadena.split("").reverse().join("") ',
            "invertida = cadena.split('').reverse().join('')  ",
            'invertida = cadena.split("").reverse().join("")  ',
            "invertida=cadena.split('').reverse().join('')  ",
            'invertida=cadena.split("").reverse().join("")  '
        ],
        solucion: "let invertida = 'dlanod otap'"
    },
    {
        nivel: 12, 
        titulo: 'Nivel 2: Junior Front-End üî¢', 
        descripcion: 'He recibido √©sta colecci√≥n de datos:', 
        problema: "let datos = [4, 10, 5, 696, 32, 369, 1000, 12, 5, 1, 2, 4, 21, 22]; <br>let ordenar = <em>undefined</em>;", 
        planteamiento: 'Ordena de forma ascendente √©stos datos y asigna el resultado a la variable <code>ordenar</code>.', 
        respuesta: [
            "ordenar = datos.sort((a, b) => a - b);",
            "ordenar = datos.sort(( a, b ) => a - b);",
            "ordenar = datos.sort((a, b)=> a - b);",
            "ordenar = datos.sort(( a, b)=> a - b);",
            "ordenar = datos.sort((a, b)=>a - b);",
            "ordenar = datos.sort(( a, b)=>a - b);",
            "ordenar = datos.sort((a, b) => a-b);",
            "ordenar = datos.sort(( a, b ) => a-b);",
            "ordenar = datos.sort((a, b)=> a-b);",
            "ordenar = datos.sort(( a, b)=> a-b);",
            "ordenar = datos.sort((a, b)=>a-b);",
            "ordenar = datos.sort(( a, b)=>a-b);",
            "ordenar= datos.sort((a, b) => a - b);",
            "ordenar= datos.sort(( a, b ) => a - b);",
            "ordenar= datos.sort((a, b)=> a - b);",
            "ordenar= datos.sort(( a, b)=> a - b);",
            "ordenar= datos.sort((a, b)=>a - b);",
            "ordenar= datos.sort(( a, b)=>a - b);",
            "ordenar= datos.sort((a, b) => a-b);",
            "ordenar= datos.sort(( a, b ) => a-b);",
            "ordenar= datos.sort((a, b)=> a-b);",
            "ordenar= datos.sort(( a, b)=> a-b);",
            "ordenar= datos.sort((a, b)=>a-b);",
            "ordenar= datos.sort(( a, b)=>a-b);",
            "ordenar=datos.sort((a, b) => a - b);",
            "ordenar=datos.sort(( a, b ) => a - b);",
            "ordenar=datos.sort((a, b)=> a - b);",
            "ordenar=datos.sort(( a, b)=> a - b);",
            "ordenar=datos.sort((a, b)=>a - b);",
            "ordenar=datos.sort(( a, b)=>a - b);",
            "ordenar=datos.sort((a, b) => a-b);",
            "ordenar=datos.sort(( a, b ) => a-b);",
            "ordenar=datos.sort((a, b)=> a-b);",
            "ordenar=datos.sort(( a, b)=> a-b);",
            "ordenar=datos.sort((a, b)=>a-b);",
            "ordenar=datos.sort(( a, b)=>a-b);",
            "ordenar =datos.sort((a, b) => a - b);",
            "ordenar =datos.sort(( a, b ) => a - b);",
            "ordenar =datos.sort((a, b)=> a - b);",
            "ordenar =datos.sort(( a, b)=> a - b);",
            "ordenar =datos.sort((a, b)=>a - b);",
            "ordenar =datos.sort(( a, b)=>a - b);",
            "ordenar =datos.sort((a, b) => a-b);",
            "ordenar =datos.sort(( a, b ) => a-b);",
            "ordenar =datos.sort((a, b)=> a-b);",
            "ordenar =datos.sort(( a, b)=> a-b);",
            "ordenar =datos.sort((a, b)=>a-b);",
            "ordenar =datos.sort(( a, b)=>a-b);",
            
            "ordenar = datos.sort((a, b) => a - b)",
            "ordenar = datos.sort(( a, b ) => a - b)",
            "ordenar = datos.sort((a, b)=> a - b)",
            "ordenar = datos.sort(( a, b)=> a - b)",
            "ordenar = datos.sort((a, b)=>a - b)",
            "ordenar = datos.sort(( a, b)=>a - b)",
            "ordenar = datos.sort((a, b) => a-b)",
            "ordenar = datos.sort(( a, b ) => a-b)",
            "ordenar = datos.sort((a, b)=> a-b)",
            "ordenar = datos.sort(( a, b)=> a-b)",
            "ordenar = datos.sort((a, b)=>a-b)",
            "ordenar = datos.sort(( a, b)=>a-b)",
            "ordenar= datos.sort((a, b) => a - b)",
            "ordenar= datos.sort(( a, b ) => a - b)",
            "ordenar= datos.sort((a, b)=> a - b)",
            "ordenar= datos.sort(( a, b)=> a - b)",
            "ordenar= datos.sort((a, b)=>a - b)",
            "ordenar= datos.sort(( a, b)=>a - b)",
            "ordenar= datos.sort((a, b) => a-b)",
            "ordenar= datos.sort(( a, b ) => a-b)",
            "ordenar= datos.sort((a, b)=> a-b)",
            "ordenar= datos.sort(( a, b)=> a-b)",
            "ordenar= datos.sort((a, b)=>a-b)",
            "ordenar= datos.sort(( a, b)=>a-b)",
            "ordenar=datos.sort((a, b) => a - b)",
            "ordenar=datos.sort(( a, b ) => a - b)",
            "ordenar=datos.sort((a, b)=> a - b)",
            "ordenar=datos.sort(( a, b)=> a - b)",
            "ordenar=datos.sort((a, b)=>a - b)",
            "ordenar=datos.sort(( a, b)=>a - b)",
            "ordenar=datos.sort((a, b) => a-b)",
            "ordenar=datos.sort(( a, b ) => a-b)",
            "ordenar=datos.sort((a, b)=> a-b)",
            "ordenar=datos.sort(( a, b)=> a-b)",
            "ordenar=datos.sort((a, b)=>a-b)",
            "ordenar=datos.sort(( a, b)=>a-b)",
            "ordenar =datos.sort((a, b) => a - b)",
            "ordenar =datos.sort(( a, b ) => a - b)",
            "ordenar =datos.sort((a, b)=> a - b)",
            "ordenar =datos.sort(( a, b)=> a - b)",
            "ordenar =datos.sort((a, b)=>a - b)",
            "ordenar =datos.sort(( a, b)=>a - b)",
            "ordenar =datos.sort((a, b) => a-b)",
            "ordenar =datos.sort(( a, b ) => a-b)",
            "ordenar =datos.sort((a, b)=> a-b)",
            "ordenar =datos.sort(( a, b)=> a-b)",
            "ordenar =datos.sort((a, b)=>a-b)",
            "ordenar =datos.sort(( a, b)=>a-b)",

            "ordenar = datos.sort((a, b) => a - b) ",
            "ordenar = datos.sort(( a, b ) => a - b) ",
            "ordenar = datos.sort((a, b)=> a - b) ",
            "ordenar = datos.sort(( a, b)=> a - b) ",
            "ordenar = datos.sort((a, b)=>a - b) ",
            "ordenar = datos.sort(( a, b)=>a - b) ",
            "ordenar = datos.sort((a, b) => a-b) ",
            "ordenar = datos.sort(( a, b ) => a-b) ",
            "ordenar = datos.sort((a, b)=> a-b) ",
            "ordenar = datos.sort(( a, b)=> a-b) ",
            "ordenar = datos.sort((a, b)=>a-b) ",
            "ordenar = datos.sort(( a, b)=>a-b) ",
            "ordenar= datos.sort((a, b) => a - b) ",
            "ordenar= datos.sort(( a, b ) => a - b) ",
            "ordenar= datos.sort((a, b)=> a - b) ",
            "ordenar= datos.sort(( a, b)=> a - b) ",
            "ordenar= datos.sort((a, b)=>a - b) ",
            "ordenar= datos.sort(( a, b)=>a - b) ",
            "ordenar= datos.sort((a, b) => a-b) ",
            "ordenar= datos.sort(( a, b ) => a-b) ",
            "ordenar= datos.sort((a, b)=> a-b) ",
            "ordenar= datos.sort(( a, b)=> a-b) ",
            "ordenar= datos.sort((a, b)=>a-b) ",
            "ordenar= datos.sort(( a, b)=>a-b) ",
            "ordenar=datos.sort((a, b) => a - b) ",
            "ordenar=datos.sort(( a, b ) => a - b) ",
            "ordenar=datos.sort((a, b)=> a - b) ",
            "ordenar=datos.sort(( a, b)=> a - b) ",
            "ordenar=datos.sort((a, b)=>a - b) ",
            "ordenar=datos.sort(( a, b)=>a - b) ",
            "ordenar=datos.sort((a, b) => a-b) ",
            "ordenar=datos.sort(( a, b ) => a-b) ",
            "ordenar=datos.sort((a, b)=> a-b) ",
            "ordenar=datos.sort(( a, b)=> a-b) ",
            "ordenar=datos.sort((a, b)=>a-b) ",
            "ordenar=datos.sort(( a, b)=>a-b) ",
            "ordenar =datos.sort((a, b) => a - b) ",
            "ordenar =datos.sort(( a, b ) => a - b) ",
            "ordenar =datos.sort((a, b)=> a - b) ",
            "ordenar =datos.sort(( a, b)=> a - b) ",
            "ordenar =datos.sort((a, b)=>a - b) ",
            "ordenar =datos.sort(( a, b)=>a - b) ",
            "ordenar =datos.sort((a, b) => a-b) ",
            "ordenar =datos.sort(( a, b ) => a-b) ",
            "ordenar =datos.sort((a, b)=> a-b) ",
            "ordenar =datos.sort(( a, b)=> a-b) ",
            "ordenar =datos.sort((a, b)=>a-b) ",
            "ordenar =datos.sort(( a, b)=>a-b) ",

            "ordenar = datos.sort((a, b) => a - b) ;",
            "ordenar = datos.sort(( a, b ) => a - b) ;",
            "ordenar = datos.sort((a, b)=> a - b) ;",
            "ordenar = datos.sort(( a, b)=> a - b) ;",
            "ordenar = datos.sort((a, b)=>a - b) ;",
            "ordenar = datos.sort(( a, b)=>a - b) ;",
            "ordenar = datos.sort((a, b) => a-b) ;",
            "ordenar = datos.sort(( a, b ) => a-b) ;",
            "ordenar = datos.sort((a, b)=> a-b) ;",
            "ordenar = datos.sort(( a, b)=> a-b) ;",
            "ordenar = datos.sort((a, b)=>a-b) ;",
            "ordenar = datos.sort(( a, b)=>a-b) ;",
            "ordenar= datos.sort((a, b) => a - b) ;",
            "ordenar= datos.sort(( a, b ) => a - b) ;",
            "ordenar= datos.sort((a, b)=> a - b) ;",
            "ordenar= datos.sort(( a, b)=> a - b) ;",
            "ordenar= datos.sort((a, b)=>a - b) ;",
            "ordenar= datos.sort(( a, b)=>a - b) ;",
            "ordenar= datos.sort((a, b) => a-b) ;",
            "ordenar= datos.sort(( a, b ) => a-b) ;",
            "ordenar= datos.sort((a, b)=> a-b) ;",
            "ordenar= datos.sort(( a, b)=> a-b) ;",
            "ordenar= datos.sort((a, b)=>a-b) ;",
            "ordenar= datos.sort(( a, b)=>a-b) ;",
            "ordenar=datos.sort((a, b) => a - b) ;",
            "ordenar=datos.sort(( a, b ) => a - b) ;",
            "ordenar=datos.sort((a, b)=> a - b) ;",
            "ordenar=datos.sort(( a, b)=> a - b) ;",
            "ordenar=datos.sort((a, b)=>a - b) ;",
            "ordenar=datos.sort(( a, b)=>a - b) ;",
            "ordenar=datos.sort((a, b) => a-b) ;",
            "ordenar=datos.sort(( a, b ) => a-b) ;",
            "ordenar=datos.sort((a, b)=> a-b) ;",
            "ordenar=datos.sort(( a, b)=> a-b) ;",
            "ordenar=datos.sort((a, b)=>a-b) ;",
            "ordenar=datos.sort(( a, b)=>a-b) ;",
            "ordenar =datos.sort((a, b) => a - b) ;",
            "ordenar =datos.sort(( a, b ) => a - b) ;",
            "ordenar =datos.sort((a, b)=> a - b) ;",
            "ordenar =datos.sort(( a, b)=> a - b) ;",
            "ordenar =datos.sort((a, b)=>a - b) ;",
            "ordenar =datos.sort(( a, b)=>a - b) ;",
            "ordenar =datos.sort((a, b) => a-b) ;",
            "ordenar =datos.sort(( a, b ) => a-b) ;",
            "ordenar =datos.sort((a, b)=> a-b) ;",
            "ordenar =datos.sort(( a, b)=> a-b) ;",
            "ordenar =datos.sort((a, b)=>a-b) ;",
            "ordenar =datos.sort(( a, b)=>a-b) ;"
        ],
        solucion: "let ordenar = [1, 2, 4, 4, 5, 5, 10, 12, 21, 22, 32, 369, 696, 1000];"
    },
    {
        nivel: 13, 
        titulo: 'Nivel 3: Junior Front-End üïµÔ∏è‚Äç‚ôÄÔ∏è', 
        descripcion: 'Quiero saber el n√∫mero total, de todas las "s" que hay en √©ste trabalenguas:', 
        problema: "let trabalenguas = 'Si tu gusto gustara del gusto que gusta mi gusto, mi gusto gustar√≠a del gusto que gusta tu gusto'; <br>let repet = <em>null</em>;", 
        planteamiento: '¬øCu√°l es el n√∫mero de veces que se repite la letra "s" en el trabalenguas?. Asignalo el resultado a la variable <code>repet</code>.', 
        respuesta: [
        "repet = trabalenguas.match(/s/gi).length;",
        'repet=trabalenguas.match(/s/gi).length;',
        'repet= trabalenguas.match(/s/gi).length;',
        'repet =trabalenguas.match(/s/gi).length;',
        "repet = trabalenguas.match(/s/gi).length",
        'repet=trabalenguas.match(/s/gi).length',
        'repet= trabalenguas.match(/s/gi).length',
        'repet =trabalenguas.match(/s/gi).length',
        "repet = trabalenguas.match(/s/gi).length ;",
        'repet=trabalenguas.match(/s/gi).length ;',
        'repet= trabalenguas.match(/s/gi).length ;',
        'repet =trabalenguas.match(/s/gi).length ;'
        ],
        solucion: "let repet = '11';"
    },    
    {
        nivel: 14, 
        titulo: 'Nivel 4: Junior Front-End üßÆ', 
        descripcion: '', 
        problema: "let cadena = 'El n√∫mero pi 3,14 es muy largo. 3,141592653589793 y m√°s. En binario es 11,001001 y m√°s.'; <br>let cantidad = <em>null</em>;", 
        planteamiento: '¬øCu√°l es la cantidad de n√∫meros que contiene esta cadena?. Asigna el valor a la variable <code>cantidad</code>.', 
        respuesta: [
        "cantidad = cadena.match(/[0-9]/g).length;",
        'cantidad=cadena.match(/[0-9]/g).length;',
        "cantidad =cadena.match(/[0-9]/g).length;",
        'cantidad= cadena.match(/[0-9]/g).length;',
        "cantidad = cadena.match(/[0-9]/g).length",
        "cantidad=cadena.match(/[0-9]/g).length",
        'cantidad =cadena.match(/[0-9]/g).length',
        "cantidad= cadena.match(/[0-9]/g).length",
        "cantidad = cadena.match(/[0-9]/g).length ;",
        'cantidad=cadena.match(/[0-9]/g).length ;',
        "cantidad =cadena.match(/[0-9]/g).length ;",
        'cantidad= cadena.match(/[0-9]/g).length ;',
        'cantidad= cadena.match(/[0-9]/g).length '
        ],
        solucion: "let cantidad = 27;"
    }
    ,
    {
        nivel: 'Final', 
        titulo: 'Finished!üéâ', 
        descripcion: "Congratulations, you've finished the JS Methods Game.", 
        problema: "üòÅlet JsMethodsGame = true;üòÅ", 
        planteamiento: 'See more of me, here: <code><a href="https://github.com/Alvaro624la" target="_blank">https://github.com/Alvaro624la</a></code>',
        respuesta: [],
        solucion: ""
    }
];

//IDEAS NUEVOS NIVELES

//-------NOSE-------
// a = ['coche', 'moto'];
// console.log(a.concat('bici'));
//resultado: a = ;

//-------NOSE-------
//let b = ['√Ålvaro', 'Prado'];
// console.log(b.join(' de '));
//resultado: b = ;

//-------NOSE-------
// let g = ['1', '2', '3'];
// console.log(g.sort());
//resultado: 

//NIVEL x
// let sobrino = 'Alejandro Daniel Ramirez';
// let palabras = null;

// //contar palabras caracteres string javascript:
// // Quitar los espacios en blanco y pasar el string a min√∫sculas(si es necesario)
// // Recorrer la cadena de texto en vez de pasarlo a un array.
// // Finalmente guardar el resultado en un object, donde la letra es la key y su total.

// console.log(palabras);

//     {
//         nivel: 333, 
//         titulo: 'Nivel 4: Junior Front-End #Ô∏è‚É£', 
//         descripcion: 'Teniendo esta frase:', problema: "let frase = ' Bueno,  parece   algo   ,  facil'; <br>let palabras = <em>undefined</em>;", 
//         planteamiento: '¬øCu√°l es la cantidad de palabras contiene esta frase?. Asigna el valor a la variable <code>palabras</code>.', 
//         respuesta: {
//             a: "",
//             b: '',
//             c: "",
//             d: '',
//             e: "",
//             f: "",
//             g: '',
//             h: "",
//             i: '',
//             j: ""
//         },
//         solucion: ""
//     },    
//     {
//         nivel: 222, 
//         titulo: 'Nivel 7: Junior Front-End', 
//         descripcion: 'Distancia de Hamming', 
//         problema: "", 
//         planteamiento: '', 
//         respuesta: {
//             a: "",
//             b: '',
//             c: "",
//             d: '',
//             e: "",
//             f: "",
//             g: '',
//             h: "",
//             i: '',
//             j: ""
//         },
//         solucion: ""
//     },    
//     {
//         nivel: 666, 
//         titulo: '', 
//         descripcion: 'Hoy tengo comida familiar. Quiero poner el nombre de los invitados en las sillas, pero tengo poco espacio para escribir a mi sobrino', 
//         problema: "let sobrino = 'Alejandro Daniel Ramirez'", 
//         planteamiento: '¬øCu√°ntas palabras/car√°cteres contiene exactamente el nombre de "Alejandro"? Asigna el valor resultante a la variable "palabras"', 
//         respuesta: {
//             a: "",
//             b: '',
//             c: "",
//             d: '',
//             e: "",
//             f: "",
//             g: '',
//             h: "",
//             i: '',
//             j: ""
//         },
//         solucion: ""
//     }

/*

M√©todos:
    Utilizados:
        unshift
        splice
        length
        push
        shift
        slice
        lastIndexOf
        indexOf
        reverse
        pop
        split
        sort
        match

    A√±adir:
        map
        filter
        find
        findIndexOf
        fill
        some
        every
        from
        includes
        search


*/